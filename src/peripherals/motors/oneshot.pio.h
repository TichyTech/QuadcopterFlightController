// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// oneshot //
// ------- //

#define oneshot_wrap_target 0
#define oneshot_wrap 7

static const uint16_t oneshot_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6020, //  1: out    x, 32                      
    0x80a0, //  2: pull   block                      
    0x6040, //  3: out    y, 32                      
    0xe001, //  4: set    pins, 1                    
    0x0045, //  5: jmp    x--, 5                     
    0xe000, //  6: set    pins, 0                    
    0x0087, //  7: jmp    y--, 7                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program oneshot_program = {
    .instructions = oneshot_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config oneshot_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + oneshot_wrap_target, offset + oneshot_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
static inline void oneshot_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = oneshot_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

#endif
